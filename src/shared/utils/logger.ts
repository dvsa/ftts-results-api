import { Context } from '@azure/functions';
import { Logger as AzureLogger, getOperationId } from '@dvsa/azure-logger';
import { Props } from '@dvsa/azure-logger/dist/ILogger';

import config from '../config/index';

export class Logger extends AzureLogger {
  constructor() {
    super('FTTS', config.websiteSiteName);
  }

  logEvent(
    telemetryEvent: BusinessTelemetryEvent,
    message?: string,
    properties?: Props,
  ): void {
    super.event(
      telemetryEvent,
      message,
      { ...properties },
    );
  }

  getOperationId(context: Context): string {
    return getOperationId(context);
  }
}

export enum BusinessTelemetryEvent {
  RES_RECEIVER_RECEIVED = 'RES_RECEIVER_RECEIVED',
  RES_CONSUMER_SUCCESSFULLY_SAVED = 'RES_CONSUMER_SUCCESSFULLY_SAVED',
  RES_API_ENQUEUE_ERROR = 'RES_API_ENQUEUE_ERROR',
  RES_API_BINARY_DATA_OFFLOAD_ERROR = 'RES_API_BINARY_DATA_OFFLOAD_ERROR',
  RES_CONSUMER_QUEUE_RETRIEVE_ERROR = 'RES_CONSUMER_QUEUE_RETRIEVE_ERROR',
  RES_CONSUMER_PAYMENT_EVENT_ERROR = 'RES_CONSUMER_PAYMENT_EVENT_ERROR',
  RES_CONSUMER_CDS_BAD_REQUEST = 'RES_CONSUMER_CDS_BAD_REQUEST',
  RES_CONSUMER_CDS_CONNECTIVITY_ISSUE = 'RES_CONSUMER_CDS_CONNECTIVITY_ISSUE',
  RES_CONSUMER_CDS_NOT_FOUND = 'RES_CONSUMER_CDS_NOT_FOUND',
  RES_CONSUMER_CDS_INTERNAL_ERROR = 'RES_CONSUMER_CDS_INTERNAL_ERROR',
  RES_CONSUMER_CDS_ERROR = 'RES_CONSUMER_CDS_ERROR',
  RES_EGRESS_ERROR = 'RES_EGRESS_ERROR',
  RES_BOOKING_PRODUCT_OWED_COMPENSATION_BOOKING = 'RES_BOOKING_PRODUCT_OWED_COMPENSATION_BOOKING',
  RES_CONSUMER_PROCESSING_BOOKING = 'RES_CONSUMER_PROCESSING_BOOKING',
  RES_CONSUMER_NO_RESULTS = 'RES_CONSUMER_NO_RESULTS',
  RES_CONSUMER_PROCESSED_ALL_RESULTS = 'RES_CONSUMER_PROCESSED_ALL_RESULTS',
  RES_CONSUMER_PROCESS_ADDITIONAL_RESULTS = 'RES_CONSUMER_PROCESS_ADDITIONAL_RESULTS',
  RES_CONSUMER_PROCESSED_MAX_RESULTS = 'RES_CONSUMER_PROCESSED_MAX_RESULTS',
  RES_CONSUMER_TIMEOUT_REACHED = 'RES_CONSUMER_TIMEOUT_REACHED',
  RES_DIGITAL_RESULTS_EVENT_ERROR = 'RES_DIGITAL_RESULTS_EVENT_ERROR',
  RES_TR_PERSISTER_QUEUE_ERROR = 'RES_TR_PERSISTER_QUEUE_ERROR',
}

export const logger = new Logger();
